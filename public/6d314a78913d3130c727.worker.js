!function(e){var n={};function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/",t(t.s=2)}([function(e,n){e.exports=function(e){var n={literal:"true false null"},t=[e.QUOTE_STRING_MODE,e.C_NUMBER_MODE],r={end:",",endsWithParent:!0,excludeEnd:!0,contains:t,keywords:n},a={begin:"{",end:"}",contains:[{className:"attr",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE],illegal:"\\n"},e.inherit(r,{begin:/:/})],illegal:"\\S"},i={begin:"\\[",end:"\\]",contains:[e.inherit(r)],illegal:"\\S"};return t.splice(t.length,0,a,i),{contains:t,keywords:n,illegal:"\\S"}}},function(e,n,t){!function(e){"object"==typeof window&&window||"object"==typeof self&&self;(function(e){var n=[],t=Object.keys,r={},a={},i=/^(no-?highlight|plain|text)$/i,s=/\blang(?:uage)?-([\w-]+)\b/i,o=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,l="</span>",c={classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0};function u(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function g(e){return e.nodeName.toLowerCase()}function f(e,n){var t=e&&e.exec(n);return t&&0===t.index}function d(e){return i.test(e)}function E(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return r.forEach(function(e){for(n in e)t[n]=e[n]}),t}function p(e){var n=[];return function e(t,r){for(var a=t.firstChild;a;a=a.nextSibling)3===a.nodeType?r+=a.nodeValue.length:1===a.nodeType&&(n.push({event:"start",offset:r,node:a}),r=e(a,r),g(a).match(/br|hr|img|input/)||n.push({event:"stop",offset:r,node:a}));return r}(e,0),n}function v(e){function n(e){return e&&e.source||e}function r(t,r){return new RegExp(n(t),"m"+(e.case_insensitive?"i":"")+(r?"g":""))}!function a(i,s){if(i.compiled)return;i.compiled=!0;i.keywords=i.keywords||i.beginKeywords;if(i.keywords){var o={},l=function(n,t){e.case_insensitive&&(t=t.toLowerCase()),t.split(" ").forEach(function(e){var t=e.split("|");o[t[0]]=[n,t[1]?Number(t[1]):1]})};"string"==typeof i.keywords?l("keyword",i.keywords):t(i.keywords).forEach(function(e){l(e,i.keywords[e])}),i.keywords=o}i.lexemesRe=r(i.lexemes||/\w+/,!0);s&&(i.beginKeywords&&(i.begin="\\b("+i.beginKeywords.split(" ").join("|")+")\\b"),i.begin||(i.begin=/\B|\b/),i.beginRe=r(i.begin),i.end||i.endsWithParent||(i.end=/\B|\b/),i.end&&(i.endRe=r(i.end)),i.terminator_end=n(i.end)||"",i.endsWithParent&&s.terminator_end&&(i.terminator_end+=(i.end?"|":"")+s.terminator_end));i.illegal&&(i.illegalRe=r(i.illegal));null==i.relevance&&(i.relevance=1);i.contains||(i.contains=[]);i.contains=Array.prototype.concat.apply([],i.contains.map(function(e){return function(e){e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(n){return E(e,{variants:null},n)}));return e.cached_variants||e.endsWithParent&&[E(e)]||[e]}("self"===e?i:e)}));i.contains.forEach(function(e){a(e,i)});i.starts&&a(i.starts,s);var c=i.contains.map(function(e){return e.beginKeywords?"\\.?("+e.begin+")\\.?":e.begin}).concat([i.terminator_end,i.illegal]).map(n).filter(Boolean);i.terminators=c.length?r(c.join("|"),!0):{exec:function(){return null}}}(e)}function h(e,n,t,a){function i(e,n){var t=E.case_insensitive?n[0].toLowerCase():n[0];return e.keywords.hasOwnProperty(t)&&e.keywords[t]}function s(e,n,t,r){var a=r?"":c.classPrefix,i='<span class="'+a,s=t?"":l;return(i+=e+'">')+n+s}function o(){R+=null!=m.subLanguage?function(){var e="string"==typeof m.subLanguage;if(e&&!r[m.subLanguage])return u(w);var n=e?h(m.subLanguage,w,!0,_[m.subLanguage]):b(w,m.subLanguage.length?m.subLanguage:void 0);m.relevance>0&&(M+=n.relevance);e&&(_[m.subLanguage]=n.top);return s(n.language,n.value,!1,!0)}():function(){var e,n,t,r;if(!m.keywords)return u(w);r="",n=0,m.lexemesRe.lastIndex=0,t=m.lexemesRe.exec(w);for(;t;)r+=u(w.substring(n,t.index)),(e=i(m,t))?(M+=e[1],r+=s(e[0],u(t[0]))):r+=u(t[0]),n=m.lexemesRe.lastIndex,t=m.lexemesRe.exec(w);return r+u(w.substr(n))}(),w=""}function g(e){R+=e.className?s(e.className,"",!0):"",m=Object.create(e,{parent:{value:m}})}function d(e,n){if(w+=e,null==n)return o(),0;var r=function(e,n){var t,r;for(t=0,r=n.contains.length;t<r;t++)if(f(n.contains[t].beginRe,e))return n.contains[t]}(n,m);if(r)return r.skip?w+=n:(r.excludeBegin&&(w+=n),o(),r.returnBegin||r.excludeBegin||(w=n)),g(r),r.returnBegin?0:n.length;var a=function e(n,t){if(f(n.endRe,t)){for(;n.endsParent&&n.parent;)n=n.parent;return n}if(n.endsWithParent)return e(n.parent,t)}(m,n);if(a){var i=m;i.skip?w+=n:(i.returnEnd||i.excludeEnd||(w+=n),o(),i.excludeEnd&&(w=n));do{m.className&&(R+=l),m.skip||(M+=m.relevance),m=m.parent}while(m!==a.parent);return a.starts&&g(a.starts),i.returnEnd?0:n.length}if(function(e,n){return!t&&f(n.illegalRe,e)}(n,m))throw new Error('Illegal lexeme "'+n+'" for mode "'+(m.className||"<unnamed>")+'"');return w+=n,n.length||1}var E=N(e);if(!E)throw new Error('Unknown language: "'+e+'"');v(E);var p,m=a||E,_={},R="";for(p=m;p!==E;p=p.parent)p.className&&(R=s(p.className,"",!0)+R);var w="",M=0;try{for(var x,O,y=0;m.terminators.lastIndex=y,x=m.terminators.exec(n);)O=d(n.substring(y,x.index),x[0]),y=x.index+O;for(d(n.substr(y)),p=m;p.parent;p=p.parent)p.className&&(R+=l);return{relevance:M,value:R,language:e,top:m}}catch(e){if(e.message&&-1!==e.message.indexOf("Illegal"))return{relevance:0,value:u(n)};throw e}}function b(e,n){n=n||c.languages||t(r);var a={relevance:0,value:u(e)},i=a;return n.filter(N).forEach(function(n){var t=h(n,e,!1);t.language=n,t.relevance>i.relevance&&(i=t),t.relevance>a.relevance&&(i=a,a=t)}),i.language&&(a.second_best=i),a}function m(e){return c.tabReplace||c.useBR?e.replace(o,function(e,n){return c.useBR&&"\n"===e?"<br>":c.tabReplace?n.replace(/\t/g,c.tabReplace):""}):e}function _(e){var t,r,i,o,l,f=function(e){var n,t,r,a,i=e.className+" ";if(i+=e.parentNode?e.parentNode.className:"",t=s.exec(i))return N(t[1])?t[1]:"no-highlight";for(i=i.split(/\s+/),n=0,r=i.length;n<r;n++)if(d(a=i[n])||N(a))return a}(e);d(f)||(c.useBR?(t=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n"):t=e,l=t.textContent,i=f?h(f,l,!0):b(l),(r=p(t)).length&&((o=document.createElementNS("http://www.w3.org/1999/xhtml","div")).innerHTML=i.value,i.value=function(e,t,r){var a=0,i="",s=[];function o(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function l(e){i+="<"+g(e)+n.map.call(e.attributes,function(e){return" "+e.nodeName+'="'+u(e.value).replace('"',"&quot;")+'"'}).join("")+">"}function c(e){i+="</"+g(e)+">"}function f(e){("start"===e.event?l:c)(e.node)}for(;e.length||t.length;){var d=o();if(i+=u(r.substring(a,d[0].offset)),a=d[0].offset,d===e){s.reverse().forEach(c);do{f(d.splice(0,1)[0]),d=o()}while(d===e&&d.length&&d[0].offset===a);s.reverse().forEach(l)}else"start"===d[0].event?s.push(d[0].node):s.pop(),f(d.splice(0,1)[0])}return i+u(r.substr(a))}(r,p(o),l)),i.value=m(i.value),e.innerHTML=i.value,e.className=function(e,n,t){var r=n?a[n]:t,i=[e.trim()];e.match(/\bhljs\b/)||i.push("hljs");-1===e.indexOf(r)&&i.push(r);return i.join(" ").trim()}(e.className,f,i.language),e.result={language:i.language,re:i.relevance},i.second_best&&(e.second_best={language:i.second_best.language,re:i.second_best.relevance}))}function R(){if(!R.called){R.called=!0;var e=document.querySelectorAll("pre code");n.forEach.call(e,_)}}function N(e){return e=(e||"").toLowerCase(),r[e]||r[a[e]]}e.highlight=h,e.highlightAuto=b,e.fixMarkup=m,e.highlightBlock=_,e.configure=function(e){c=E(c,e)},e.initHighlighting=R,e.initHighlightingOnLoad=function(){addEventListener("DOMContentLoaded",R,!1),addEventListener("load",R,!1)},e.registerLanguage=function(n,t){var i=r[n]=t(e);i.aliases&&i.aliases.forEach(function(e){a[e]=n})},e.listLanguages=function(){return t(r)},e.getLanguage=N,e.inherit=E,e.IDENT_RE="[a-zA-Z]\\w*",e.UNDERSCORE_IDENT_RE="[a-zA-Z_]\\w*",e.NUMBER_RE="\\b\\d+(\\.\\d+)?",e.C_NUMBER_RE="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",e.BINARY_NUMBER_RE="\\b(0b[01]+)",e.RE_STARTERS_RE="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",e.BACKSLASH_ESCAPE={begin:"\\\\[\\s\\S]",relevance:0},e.APOS_STRING_MODE={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.QUOTE_STRING_MODE={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},e.PHRASAL_WORDS_MODE={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},e.COMMENT=function(n,t,r){var a=e.inherit({className:"comment",begin:n,end:t,contains:[]},r||{});return a.contains.push(e.PHRASAL_WORDS_MODE),a.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),a},e.C_LINE_COMMENT_MODE=e.COMMENT("//","$"),e.C_BLOCK_COMMENT_MODE=e.COMMENT("/\\*","\\*/"),e.HASH_COMMENT_MODE=e.COMMENT("#","$"),e.NUMBER_MODE={className:"number",begin:e.NUMBER_RE,relevance:0},e.C_NUMBER_MODE={className:"number",begin:e.C_NUMBER_RE,relevance:0},e.BINARY_NUMBER_MODE={className:"number",begin:e.BINARY_NUMBER_RE,relevance:0},e.CSS_NUMBER_MODE={className:"number",begin:e.NUMBER_RE+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},e.REGEXP_MODE={className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,{begin:/\[/,end:/\]/,relevance:0,contains:[e.BACKSLASH_ESCAPE]}]},e.TITLE_MODE={className:"title",begin:e.IDENT_RE,relevance:0},e.UNDERSCORE_TITLE_MODE={className:"title",begin:e.UNDERSCORE_IDENT_RE,relevance:0},e.METHOD_GUARD={begin:"\\.\\s*"+e.UNDERSCORE_IDENT_RE,relevance:0}})(n)}()},function(e,n,t){"use strict";t.r(n);var r=t(1),a=t.n(r),i=t(0),s=t.n(i);a.a.registerLanguage("json",s.a),onmessage=function(e){postMessage("can do this")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvbGFuZ3VhZ2VzL2pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpZ2hsaWdodC5qcy9saWIvaGlnaGxpZ2h0LmpzIiwid2VicGFjazovLy8uL3NyYy9qYXZhc2NyaXB0L1dvcmtlci5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaGxqcyIsIkxJVEVSQUxTIiwibGl0ZXJhbCIsIlRZUEVTIiwiUVVPVEVfU1RSSU5HX01PREUiLCJDX05VTUJFUl9NT0RFIiwiVkFMVUVfQ09OVEFJTkVSIiwiZW5kIiwiZW5kc1dpdGhQYXJlbnQiLCJleGNsdWRlRW5kIiwiY29udGFpbnMiLCJrZXl3b3JkcyIsIk9CSkVDVCIsImJlZ2luIiwiY2xhc3NOYW1lIiwiQkFDS1NMQVNIX0VTQ0FQRSIsImlsbGVnYWwiLCJpbmhlcml0IiwiQVJSQVkiLCJzcGxpY2UiLCJsZW5ndGgiLCJmYWN0b3J5Iiwid2luZG93Iiwic2VsZiIsIkFycmF5UHJvdG8iLCJvYmplY3RLZXlzIiwia2V5cyIsImxhbmd1YWdlcyIsImFsaWFzZXMiLCJub0hpZ2hsaWdodFJlIiwibGFuZ3VhZ2VQcmVmaXhSZSIsImZpeE1hcmt1cFJlIiwic3BhbkVuZFRhZyIsIm9wdGlvbnMiLCJjbGFzc1ByZWZpeCIsInRhYlJlcGxhY2UiLCJ1c2VCUiIsInVuZGVmaW5lZCIsImVzY2FwZSIsInJlcGxhY2UiLCJ0YWciLCJub2RlIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInRlc3RSZSIsInJlIiwibGV4ZW1lIiwibWF0Y2giLCJleGVjIiwiaW5kZXgiLCJpc05vdEhpZ2hsaWdodGVkIiwibGFuZ3VhZ2UiLCJ0ZXN0IiwicGFyZW50Iiwia2V5IiwicmVzdWx0Iiwib2JqZWN0cyIsIkFycmF5Iiwic2xpY2UiLCJhcmd1bWVudHMiLCJmb3JFYWNoIiwib2JqIiwibm9kZVN0cmVhbSIsIl9ub2RlU3RyZWFtIiwib2Zmc2V0IiwiY2hpbGQiLCJmaXJzdENoaWxkIiwibmV4dFNpYmxpbmciLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInB1c2giLCJldmVudCIsImNvbXBpbGVMYW5ndWFnZSIsInJlU3RyIiwic291cmNlIiwibGFuZ1JlIiwiZ2xvYmFsIiwiUmVnRXhwIiwiY2FzZV9pbnNlbnNpdGl2ZSIsImNvbXBpbGVNb2RlIiwibW9kZSIsImNvbXBpbGVkIiwiYmVnaW5LZXl3b3JkcyIsImNvbXBpbGVkX2tleXdvcmRzIiwiZmxhdHRlbiIsInN0ciIsInNwbGl0Iiwia3ciLCJwYWlyIiwiTnVtYmVyIiwibGV4ZW1lc1JlIiwibGV4ZW1lcyIsImpvaW4iLCJiZWdpblJlIiwiZW5kUmUiLCJ0ZXJtaW5hdG9yX2VuZCIsImlsbGVnYWxSZSIsInJlbGV2YW5jZSIsImNvbmNhdCIsImFwcGx5IiwibWFwIiwidmFyaWFudHMiLCJjYWNoZWRfdmFyaWFudHMiLCJ2YXJpYW50IiwiZXhwYW5kX21vZGUiLCJzdGFydHMiLCJ0ZXJtaW5hdG9ycyIsImZpbHRlciIsIkJvb2xlYW4iLCJoaWdobGlnaHQiLCJpZ25vcmVfaWxsZWdhbHMiLCJjb250aW51YXRpb24iLCJrZXl3b3JkTWF0Y2giLCJtYXRjaF9zdHIiLCJidWlsZFNwYW4iLCJjbGFzc25hbWUiLCJpbnNpZGVTcGFuIiwibGVhdmVPcGVuIiwibm9QcmVmaXgiLCJvcGVuU3BhbiIsImNsb3NlU3BhbiIsInByb2Nlc3NCdWZmZXIiLCJ0b3AiLCJzdWJMYW5ndWFnZSIsImV4cGxpY2l0IiwibW9kZV9idWZmZXIiLCJjb250aW51YXRpb25zIiwiaGlnaGxpZ2h0QXV0byIsInByb2Nlc3NTdWJMYW5ndWFnZSIsImtleXdvcmRfbWF0Y2giLCJsYXN0X2luZGV4IiwibGFzdEluZGV4Iiwic3Vic3RyaW5nIiwic3Vic3RyIiwicHJvY2Vzc0tleXdvcmRzIiwic3RhcnROZXdNb2RlIiwiY3JlYXRlIiwicHJvY2Vzc0xleGVtZSIsImJ1ZmZlciIsIm5ld19tb2RlIiwic3ViTW9kZSIsInNraXAiLCJleGNsdWRlQmVnaW4iLCJyZXR1cm5CZWdpbiIsImVuZF9tb2RlIiwiZW5kT2ZNb2RlIiwiZW5kc1BhcmVudCIsIm9yaWdpbiIsInJldHVybkVuZCIsImlzSWxsZWdhbCIsIkVycm9yIiwiZ2V0TGFuZ3VhZ2UiLCJjdXJyZW50IiwiY291bnQiLCJlIiwibWVzc2FnZSIsImluZGV4T2YiLCJ0ZXh0IiwibGFuZ3VhZ2VTdWJzZXQiLCJzZWNvbmRfYmVzdCIsImZpeE1hcmt1cCIsInAxIiwiaGlnaGxpZ2h0QmxvY2siLCJibG9jayIsIm9yaWdpbmFsU3RyZWFtIiwicmVzdWx0Tm9kZSIsIl9jbGFzcyIsImNsYXNzZXMiLCJwYXJlbnROb2RlIiwiYmxvY2tMYW5ndWFnZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiaW5uZXJIVE1MIiwidGV4dENvbnRlbnQiLCJvcmlnaW5hbCIsImhpZ2hsaWdodGVkIiwicHJvY2Vzc2VkIiwibm9kZVN0YWNrIiwic2VsZWN0U3RyZWFtIiwib3BlbiIsImF0dHJpYnV0ZXMiLCJhIiwiY2xvc2UiLCJyZW5kZXIiLCJzdHJlYW0iLCJyZXZlcnNlIiwicG9wIiwibWVyZ2VTdHJlYW1zIiwicHJldkNsYXNzTmFtZSIsImN1cnJlbnRMYW5nIiwicmVzdWx0TGFuZyIsInRyaW0iLCJidWlsZENsYXNzTmFtZSIsImluaXRIaWdobGlnaHRpbmciLCJjYWxsZWQiLCJibG9ja3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY29uZmlndXJlIiwidXNlcl9vcHRpb25zIiwiaW5pdEhpZ2hsaWdodGluZ09uTG9hZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZWdpc3Rlckxhbmd1YWdlIiwibGFuZyIsImFsaWFzIiwibGlzdExhbmd1YWdlcyIsIklERU5UX1JFIiwiVU5ERVJTQ09SRV9JREVOVF9SRSIsIk5VTUJFUl9SRSIsIkNfTlVNQkVSX1JFIiwiQklOQVJZX05VTUJFUl9SRSIsIlJFX1NUQVJURVJTX1JFIiwiQVBPU19TVFJJTkdfTU9ERSIsIlBIUkFTQUxfV09SRFNfTU9ERSIsIkNPTU1FTlQiLCJpbmhlcml0cyIsIkNfTElORV9DT01NRU5UX01PREUiLCJDX0JMT0NLX0NPTU1FTlRfTU9ERSIsIkhBU0hfQ09NTUVOVF9NT0RFIiwiTlVNQkVSX01PREUiLCJCSU5BUllfTlVNQkVSX01PREUiLCJDU1NfTlVNQkVSX01PREUiLCJSRUdFWFBfTU9ERSIsIlRJVExFX01PREUiLCJVTkRFUlNDT1JFX1RJVExFX01PREUiLCJNRVRIT0RfR1VBUkQiLCJoaWdobGlnaHRfanNfbGliX2hpZ2hsaWdodF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJoaWdobGlnaHRfanNfbGliX2xhbmd1YWdlc19qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FO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QSxhQUNBUyxRQUFBLEtBQ0FOLFVBQ0FWLEVBQUFlLGtCQUVBRixNQUFBLEtBQUFOLElBQUEsS0FDQTBGLFVBQUEsRUFDQXZGLFVBQUFWLEVBQUFlLHFCQUlBZixFQUFBOE4sWUFDQWhOLFVBQUEsUUFDQUQsTUFBQWIsRUFBQTZNLFNBQ0E1RyxVQUFBLEdBRUFqRyxFQUFBK04sdUJBQ0FqTixVQUFBLFFBQ0FELE1BQUFiLEVBQUE4TSxvQkFDQTdHLFVBQUEsR0FFQWpHLEVBQUFnTyxjQUVBbk4sTUFBQSxVQUFBYixFQUFBOE0sb0JBQ0E3RyxVQUFBLElBN3hCQTVFLENBQUFoRCxHQVRBLDRFQ0hBNFAsRUFBQTVDLEVBQUFvQixpQkFBQSxPQUFBeUIsRUFBQTdDLEdBRUE4QyxVQUFBLFNBQUF6RSxHQUtBMEUsWUFBQSIsImZpbGUiOiI2ZDMxNGE3ODkxM2QzMTMwYzcyNy53b3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGxqcykge1xuICB2YXIgTElURVJBTFMgPSB7bGl0ZXJhbDogJ3RydWUgZmFsc2UgbnVsbCd9O1xuICB2YXIgVFlQRVMgPSBbXG4gICAgaGxqcy5RVU9URV9TVFJJTkdfTU9ERSxcbiAgICBobGpzLkNfTlVNQkVSX01PREVcbiAgXTtcbiAgdmFyIFZBTFVFX0NPTlRBSU5FUiA9IHtcbiAgICBlbmQ6ICcsJywgZW5kc1dpdGhQYXJlbnQ6IHRydWUsIGV4Y2x1ZGVFbmQ6IHRydWUsXG4gICAgY29udGFpbnM6IFRZUEVTLFxuICAgIGtleXdvcmRzOiBMSVRFUkFMU1xuICB9O1xuICB2YXIgT0JKRUNUID0ge1xuICAgIGJlZ2luOiAneycsIGVuZDogJ30nLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZTogJ2F0dHInLFxuICAgICAgICBiZWdpbjogL1wiLywgZW5kOiAvXCIvLFxuICAgICAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV0sXG4gICAgICAgIGlsbGVnYWw6ICdcXFxcbicsXG4gICAgICB9LFxuICAgICAgaGxqcy5pbmhlcml0KFZBTFVFX0NPTlRBSU5FUiwge2JlZ2luOiAvOi99KVxuICAgIF0sXG4gICAgaWxsZWdhbDogJ1xcXFxTJ1xuICB9O1xuICB2YXIgQVJSQVkgPSB7XG4gICAgYmVnaW46ICdcXFxcWycsIGVuZDogJ1xcXFxdJyxcbiAgICBjb250YWluczogW2hsanMuaW5oZXJpdChWQUxVRV9DT05UQUlORVIpXSwgLy8gaW5oZXJpdCBpcyBhIHdvcmthcm91bmQgZm9yIGEgYnVnIHRoYXQgbWFrZXMgc2hhcmVkIG1vZGVzIHdpdGggZW5kc1dpdGhQYXJlbnQgY29tcGlsZSBvbmx5IHRoZSBlbmRpbmcgb2Ygb25lIG9mIHRoZSBwYXJlbnRzXG4gICAgaWxsZWdhbDogJ1xcXFxTJ1xuICB9O1xuICBUWVBFUy5zcGxpY2UoVFlQRVMubGVuZ3RoLCAwLCBPQkpFQ1QsIEFSUkFZKTtcbiAgcmV0dXJuIHtcbiAgICBjb250YWluczogVFlQRVMsXG4gICAga2V5d29yZHM6IExJVEVSQUxTLFxuICAgIGlsbGVnYWw6ICdcXFxcUydcbiAgfTtcbn07IiwiLypcblN5bnRheCBoaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBhdXRvZGV0ZWN0aW9uLlxuaHR0cHM6Ly9oaWdobGlnaHRqcy5vcmcvXG4qL1xuXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuXG4gIC8vIEZpbmQgdGhlIGdsb2JhbCBvYmplY3QgZm9yIGV4cG9ydCB0byBib3RoIHRoZSBicm93c2VyIGFuZCB3ZWIgd29ya2Vycy5cbiAgdmFyIGdsb2JhbE9iamVjdCA9IHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdyB8fFxuICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmIHNlbGY7XG5cbiAgLy8gU2V0dXAgaGlnaGxpZ2h0LmpzIGZvciBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLiBGaXJzdCBpcyBOb2RlLmpzIG9yXG4gIC8vIENvbW1vbkpTLlxuICBpZih0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBmYWN0b3J5KGV4cG9ydHMpO1xuICB9IGVsc2UgaWYoZ2xvYmFsT2JqZWN0KSB7XG4gICAgLy8gRXhwb3J0IGhsanMgZ2xvYmFsbHkgZXZlbiB3aGVuIHVzaW5nIEFNRCBmb3IgY2FzZXMgd2hlbiB0aGlzIHNjcmlwdFxuICAgIC8vIGlzIGxvYWRlZCB3aXRoIG90aGVycyB0aGF0IG1heSBzdGlsbCBleHBlY3QgYSBnbG9iYWwgaGxqcy5cbiAgICBnbG9iYWxPYmplY3QuaGxqcyA9IGZhY3Rvcnkoe30pO1xuXG4gICAgLy8gRmluYWxseSByZWdpc3RlciB0aGUgZ2xvYmFsIGhsanMgd2l0aCBBTUQuXG4gICAgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZ2xvYmFsT2JqZWN0LmhsanM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxufShmdW5jdGlvbihobGpzKSB7XG4gIC8vIENvbnZlbmllbmNlIHZhcmlhYmxlcyBmb3IgYnVpbGQtaW4gb2JqZWN0c1xuICB2YXIgQXJyYXlQcm90byA9IFtdLFxuICAgICAgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzO1xuXG4gIC8vIEdsb2JhbCBpbnRlcm5hbCB2YXJpYWJsZXMgdXNlZCB3aXRoaW4gdGhlIGhpZ2hsaWdodC5qcyBsaWJyYXJ5LlxuICB2YXIgbGFuZ3VhZ2VzID0ge30sXG4gICAgICBhbGlhc2VzICAgPSB7fTtcblxuICAvLyBSZWd1bGFyIGV4cHJlc3Npb25zIHVzZWQgdGhyb3VnaG91dCB0aGUgaGlnaGxpZ2h0LmpzIGxpYnJhcnkuXG4gIHZhciBub0hpZ2hsaWdodFJlICAgID0gL14obm8tP2hpZ2hsaWdodHxwbGFpbnx0ZXh0KSQvaSxcbiAgICAgIGxhbmd1YWdlUHJlZml4UmUgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaSxcbiAgICAgIGZpeE1hcmt1cFJlICAgICAgPSAvKCheKDxbXj5dKz58XFx0fCkrfCg/OlxcbikpKS9nbTtcblxuICB2YXIgc3BhbkVuZFRhZyA9ICc8L3NwYW4+JztcblxuICAvLyBHbG9iYWwgb3B0aW9ucyB1c2VkIHdoZW4gd2l0aGluIGV4dGVybmFsIEFQSXMuIFRoaXMgaXMgbW9kaWZpZWQgd2hlblxuICAvLyBjYWxsaW5nIHRoZSBgaGxqcy5jb25maWd1cmVgIGZ1bmN0aW9uLlxuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBjbGFzc1ByZWZpeDogJ2hsanMtJyxcbiAgICB0YWJSZXBsYWNlOiBudWxsLFxuICAgIHVzZUJSOiBmYWxzZSxcbiAgICBsYW5ndWFnZXM6IHVuZGVmaW5lZFxuICB9O1xuXG5cbiAgLyogVXRpbGl0eSBmdW5jdGlvbnMgKi9cblxuICBmdW5jdGlvbiBlc2NhcGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGFnKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVzdFJlKHJlLCBsZXhlbWUpIHtcbiAgICB2YXIgbWF0Y2ggPSByZSAmJiByZS5leGVjKGxleGVtZSk7XG4gICAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmluZGV4ID09PSAwO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNOb3RIaWdobGlnaHRlZChsYW5ndWFnZSkge1xuICAgIHJldHVybiBub0hpZ2hsaWdodFJlLnRlc3QobGFuZ3VhZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2tMYW5ndWFnZShibG9jaykge1xuICAgIHZhciBpLCBtYXRjaCwgbGVuZ3RoLCBfY2xhc3M7XG4gICAgdmFyIGNsYXNzZXMgPSBibG9jay5jbGFzc05hbWUgKyAnICc7XG5cbiAgICBjbGFzc2VzICs9IGJsb2NrLnBhcmVudE5vZGUgPyBibG9jay5wYXJlbnROb2RlLmNsYXNzTmFtZSA6ICcnO1xuXG4gICAgLy8gbGFuZ3VhZ2UtKiB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgbm9uLXByZWZpeGVkIGNsYXNzIG5hbWVzLlxuICAgIG1hdGNoID0gbGFuZ3VhZ2VQcmVmaXhSZS5leGVjKGNsYXNzZXMpO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgcmV0dXJuIGdldExhbmd1YWdlKG1hdGNoWzFdKSA/IG1hdGNoWzFdIDogJ25vLWhpZ2hsaWdodCc7XG4gICAgfVxuXG4gICAgY2xhc3NlcyA9IGNsYXNzZXMuc3BsaXQoL1xccysvKTtcblxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGNsYXNzZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIF9jbGFzcyA9IGNsYXNzZXNbaV1cblxuICAgICAgaWYgKGlzTm90SGlnaGxpZ2h0ZWQoX2NsYXNzKSB8fCBnZXRMYW5ndWFnZShfY2xhc3MpKSB7XG4gICAgICAgIHJldHVybiBfY2xhc3M7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5oZXJpdChwYXJlbnQpIHsgIC8vIGluaGVyaXQocGFyZW50LCBvdmVycmlkZV9vYmosIG92ZXJyaWRlX29iaiwgLi4uKVxuICAgIHZhciBrZXk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBvYmplY3RzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIGZvciAoa2V5IGluIHBhcmVudClcbiAgICAgIHJlc3VsdFtrZXldID0gcGFyZW50W2tleV07XG4gICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iaikge1xuICAgICAgZm9yIChrZXkgaW4gb2JqKVxuICAgICAgICByZXN1bHRba2V5XSA9IG9ialtrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKiBTdHJlYW0gbWVyZ2luZyAqL1xuXG4gIGZ1bmN0aW9uIG5vZGVTdHJlYW0obm9kZSkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAoZnVuY3Rpb24gX25vZGVTdHJlYW0obm9kZSwgb2Zmc2V0KSB7XG4gICAgICBmb3IgKHZhciBjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAzKVxuICAgICAgICAgIG9mZnNldCArPSBjaGlsZC5ub2RlVmFsdWUubGVuZ3RoO1xuICAgICAgICBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIGV2ZW50OiAnc3RhcnQnLFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgICBub2RlOiBjaGlsZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9mZnNldCA9IF9ub2RlU3RyZWFtKGNoaWxkLCBvZmZzZXQpO1xuICAgICAgICAgIC8vIFByZXZlbnQgdm9pZCBlbGVtZW50cyBmcm9tIGhhdmluZyBhbiBlbmQgdGFnIHRoYXQgd291bGQgYWN0dWFsbHlcbiAgICAgICAgICAvLyBkb3VibGUgdGhlbSBpbiB0aGUgb3V0cHV0LiBUaGVyZSBhcmUgbW9yZSB2b2lkIGVsZW1lbnRzIGluIEhUTUxcbiAgICAgICAgICAvLyBidXQgd2UgbGlzdCBvbmx5IHRob3NlIHJlYWxpc3RpY2FsbHkgZXhwZWN0ZWQgaW4gY29kZSBkaXNwbGF5LlxuICAgICAgICAgIGlmICghdGFnKGNoaWxkKS5tYXRjaCgvYnJ8aHJ8aW1nfGlucHV0LykpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgZXZlbnQ6ICdzdG9wJyxcbiAgICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgICAgICAgIG5vZGU6IGNoaWxkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfSkobm9kZSwgMCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlU3RyZWFtcyhvcmlnaW5hbCwgaGlnaGxpZ2h0ZWQsIHZhbHVlKSB7XG4gICAgdmFyIHByb2Nlc3NlZCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBub2RlU3RhY2sgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHNlbGVjdFN0cmVhbSgpIHtcbiAgICAgIGlmICghb3JpZ2luYWwubGVuZ3RoIHx8ICFoaWdobGlnaHRlZC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmxlbmd0aCA/IG9yaWdpbmFsIDogaGlnaGxpZ2h0ZWQ7XG4gICAgICB9XG4gICAgICBpZiAob3JpZ2luYWxbMF0ub2Zmc2V0ICE9PSBoaWdobGlnaHRlZFswXS5vZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIChvcmlnaW5hbFswXS5vZmZzZXQgPCBoaWdobGlnaHRlZFswXS5vZmZzZXQpID8gb3JpZ2luYWwgOiBoaWdobGlnaHRlZDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgIFRvIGF2b2lkIHN0YXJ0aW5nIHRoZSBzdHJlYW0ganVzdCBiZWZvcmUgaXQgc2hvdWxkIHN0b3AgdGhlIG9yZGVyIGlzXG4gICAgICBlbnN1cmVkIHRoYXQgb3JpZ2luYWwgYWx3YXlzIHN0YXJ0cyBmaXJzdCBhbmQgY2xvc2VzIGxhc3Q6XG5cbiAgICAgIGlmIChldmVudDEgPT0gJ3N0YXJ0JyAmJiBldmVudDIgPT0gJ3N0YXJ0JylcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICAgICAgaWYgKGV2ZW50MSA9PSAnc3RhcnQnICYmIGV2ZW50MiA9PSAnc3RvcCcpXG4gICAgICAgIHJldHVybiBoaWdobGlnaHRlZDtcbiAgICAgIGlmIChldmVudDEgPT0gJ3N0b3AnICYmIGV2ZW50MiA9PSAnc3RhcnQnKVxuICAgICAgICByZXR1cm4gb3JpZ2luYWw7XG4gICAgICBpZiAoZXZlbnQxID09ICdzdG9wJyAmJiBldmVudDIgPT0gJ3N0b3AnKVxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0ZWQ7XG5cbiAgICAgIC4uLiB3aGljaCBpcyBjb2xsYXBzZWQgdG86XG4gICAgICAqL1xuICAgICAgcmV0dXJuIGhpZ2hsaWdodGVkWzBdLmV2ZW50ID09PSAnc3RhcnQnID8gb3JpZ2luYWwgOiBoaWdobGlnaHRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvcGVuKG5vZGUpIHtcbiAgICAgIGZ1bmN0aW9uIGF0dHJfc3RyKGEpIHtyZXR1cm4gJyAnICsgYS5ub2RlTmFtZSArICc9XCInICsgZXNjYXBlKGEudmFsdWUpLnJlcGxhY2UoJ1wiJywgJyZxdW90OycpICsgJ1wiJzt9XG4gICAgICByZXN1bHQgKz0gJzwnICsgdGFnKG5vZGUpICsgQXJyYXlQcm90by5tYXAuY2FsbChub2RlLmF0dHJpYnV0ZXMsIGF0dHJfc3RyKS5qb2luKCcnKSArICc+JztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9zZShub2RlKSB7XG4gICAgICByZXN1bHQgKz0gJzwvJyArIHRhZyhub2RlKSArICc+JztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXIoZXZlbnQpIHtcbiAgICAgIChldmVudC5ldmVudCA9PT0gJ3N0YXJ0JyA/IG9wZW4gOiBjbG9zZSkoZXZlbnQubm9kZSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKG9yaWdpbmFsLmxlbmd0aCB8fCBoaWdobGlnaHRlZC5sZW5ndGgpIHtcbiAgICAgIHZhciBzdHJlYW0gPSBzZWxlY3RTdHJlYW0oKTtcbiAgICAgIHJlc3VsdCArPSBlc2NhcGUodmFsdWUuc3Vic3RyaW5nKHByb2Nlc3NlZCwgc3RyZWFtWzBdLm9mZnNldCkpO1xuICAgICAgcHJvY2Vzc2VkID0gc3RyZWFtWzBdLm9mZnNldDtcbiAgICAgIGlmIChzdHJlYW0gPT09IG9yaWdpbmFsKSB7XG4gICAgICAgIC8qXG4gICAgICAgIE9uIGFueSBvcGVuaW5nIG9yIGNsb3NpbmcgdGFnIG9mIHRoZSBvcmlnaW5hbCBtYXJrdXAgd2UgZmlyc3QgY2xvc2VcbiAgICAgICAgdGhlIGVudGlyZSBoaWdobGlnaHRlZCBub2RlIHN0YWNrLCB0aGVuIHJlbmRlciB0aGUgb3JpZ2luYWwgdGFnIGFsb25nXG4gICAgICAgIHdpdGggYWxsIHRoZSBmb2xsb3dpbmcgb3JpZ2luYWwgdGFncyBhdCB0aGUgc2FtZSBvZmZzZXQgYW5kIHRoZW5cbiAgICAgICAgcmVvcGVuIGFsbCB0aGUgdGFncyBvbiB0aGUgaGlnaGxpZ2h0ZWQgc3RhY2suXG4gICAgICAgICovXG4gICAgICAgIG5vZGVTdGFjay5yZXZlcnNlKCkuZm9yRWFjaChjbG9zZSk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICByZW5kZXIoc3RyZWFtLnNwbGljZSgwLCAxKVswXSk7XG4gICAgICAgICAgc3RyZWFtID0gc2VsZWN0U3RyZWFtKCk7XG4gICAgICAgIH0gd2hpbGUgKHN0cmVhbSA9PT0gb3JpZ2luYWwgJiYgc3RyZWFtLmxlbmd0aCAmJiBzdHJlYW1bMF0ub2Zmc2V0ID09PSBwcm9jZXNzZWQpO1xuICAgICAgICBub2RlU3RhY2sucmV2ZXJzZSgpLmZvckVhY2gob3Blbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RyZWFtWzBdLmV2ZW50ID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgbm9kZVN0YWNrLnB1c2goc3RyZWFtWzBdLm5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGVTdGFjay5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZW5kZXIoc3RyZWFtLnNwbGljZSgwLCAxKVswXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgKyBlc2NhcGUodmFsdWUuc3Vic3RyKHByb2Nlc3NlZCkpO1xuICB9XG5cbiAgLyogSW5pdGlhbGl6YXRpb24gKi9cblxuICBmdW5jdGlvbiBleHBhbmRfbW9kZShtb2RlKSB7XG4gICAgaWYgKG1vZGUudmFyaWFudHMgJiYgIW1vZGUuY2FjaGVkX3ZhcmlhbnRzKSB7XG4gICAgICBtb2RlLmNhY2hlZF92YXJpYW50cyA9IG1vZGUudmFyaWFudHMubWFwKGZ1bmN0aW9uKHZhcmlhbnQpIHtcbiAgICAgICAgcmV0dXJuIGluaGVyaXQobW9kZSwge3ZhcmlhbnRzOiBudWxsfSwgdmFyaWFudCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1vZGUuY2FjaGVkX3ZhcmlhbnRzIHx8IChtb2RlLmVuZHNXaXRoUGFyZW50ICYmIFtpbmhlcml0KG1vZGUpXSkgfHwgW21vZGVdO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGlsZUxhbmd1YWdlKGxhbmd1YWdlKSB7XG5cbiAgICBmdW5jdGlvbiByZVN0cihyZSkge1xuICAgICAgICByZXR1cm4gKHJlICYmIHJlLnNvdXJjZSkgfHwgcmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGFuZ1JlKHZhbHVlLCBnbG9iYWwpIHtcbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKFxuICAgICAgICByZVN0cih2YWx1ZSksXG4gICAgICAgICdtJyArIChsYW5ndWFnZS5jYXNlX2luc2Vuc2l0aXZlID8gJ2knIDogJycpICsgKGdsb2JhbCA/ICdnJyA6ICcnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21waWxlTW9kZShtb2RlLCBwYXJlbnQpIHtcbiAgICAgIGlmIChtb2RlLmNvbXBpbGVkKVxuICAgICAgICByZXR1cm47XG4gICAgICBtb2RlLmNvbXBpbGVkID0gdHJ1ZTtcblxuICAgICAgbW9kZS5rZXl3b3JkcyA9IG1vZGUua2V5d29yZHMgfHwgbW9kZS5iZWdpbktleXdvcmRzO1xuICAgICAgaWYgKG1vZGUua2V5d29yZHMpIHtcbiAgICAgICAgdmFyIGNvbXBpbGVkX2tleXdvcmRzID0ge307XG5cbiAgICAgICAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihjbGFzc05hbWUsIHN0cikge1xuICAgICAgICAgIGlmIChsYW5ndWFnZS5jYXNlX2luc2Vuc2l0aXZlKSB7XG4gICAgICAgICAgICBzdHIgPSBzdHIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RyLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbihrdykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBrdy5zcGxpdCgnfCcpO1xuICAgICAgICAgICAgY29tcGlsZWRfa2V5d29yZHNbcGFpclswXV0gPSBbY2xhc3NOYW1lLCBwYWlyWzFdID8gTnVtYmVyKHBhaXJbMV0pIDogMV07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBtb2RlLmtleXdvcmRzID09PSAnc3RyaW5nJykgeyAvLyBzdHJpbmdcbiAgICAgICAgICBmbGF0dGVuKCdrZXl3b3JkJywgbW9kZS5rZXl3b3Jkcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2JqZWN0S2V5cyhtb2RlLmtleXdvcmRzKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGZsYXR0ZW4oY2xhc3NOYW1lLCBtb2RlLmtleXdvcmRzW2NsYXNzTmFtZV0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIG1vZGUua2V5d29yZHMgPSBjb21waWxlZF9rZXl3b3JkcztcbiAgICAgIH1cbiAgICAgIG1vZGUubGV4ZW1lc1JlID0gbGFuZ1JlKG1vZGUubGV4ZW1lcyB8fCAvXFx3Ky8sIHRydWUpO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGlmIChtb2RlLmJlZ2luS2V5d29yZHMpIHtcbiAgICAgICAgICBtb2RlLmJlZ2luID0gJ1xcXFxiKCcgKyBtb2RlLmJlZ2luS2V5d29yZHMuc3BsaXQoJyAnKS5qb2luKCd8JykgKyAnKVxcXFxiJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vZGUuYmVnaW4pXG4gICAgICAgICAgbW9kZS5iZWdpbiA9IC9cXEJ8XFxiLztcbiAgICAgICAgbW9kZS5iZWdpblJlID0gbGFuZ1JlKG1vZGUuYmVnaW4pO1xuICAgICAgICBpZiAoIW1vZGUuZW5kICYmICFtb2RlLmVuZHNXaXRoUGFyZW50KVxuICAgICAgICAgIG1vZGUuZW5kID0gL1xcQnxcXGIvO1xuICAgICAgICBpZiAobW9kZS5lbmQpXG4gICAgICAgICAgbW9kZS5lbmRSZSA9IGxhbmdSZShtb2RlLmVuZCk7XG4gICAgICAgIG1vZGUudGVybWluYXRvcl9lbmQgPSByZVN0cihtb2RlLmVuZCkgfHwgJyc7XG4gICAgICAgIGlmIChtb2RlLmVuZHNXaXRoUGFyZW50ICYmIHBhcmVudC50ZXJtaW5hdG9yX2VuZClcbiAgICAgICAgICBtb2RlLnRlcm1pbmF0b3JfZW5kICs9IChtb2RlLmVuZCA/ICd8JyA6ICcnKSArIHBhcmVudC50ZXJtaW5hdG9yX2VuZDtcbiAgICAgIH1cbiAgICAgIGlmIChtb2RlLmlsbGVnYWwpXG4gICAgICAgIG1vZGUuaWxsZWdhbFJlID0gbGFuZ1JlKG1vZGUuaWxsZWdhbCk7XG4gICAgICBpZiAobW9kZS5yZWxldmFuY2UgPT0gbnVsbClcbiAgICAgICAgbW9kZS5yZWxldmFuY2UgPSAxO1xuICAgICAgaWYgKCFtb2RlLmNvbnRhaW5zKSB7XG4gICAgICAgIG1vZGUuY29udGFpbnMgPSBbXTtcbiAgICAgIH1cbiAgICAgIG1vZGUuY29udGFpbnMgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBtb2RlLmNvbnRhaW5zLm1hcChmdW5jdGlvbihjKSB7XG4gICAgICAgIHJldHVybiBleHBhbmRfbW9kZShjID09PSAnc2VsZicgPyBtb2RlIDogYylcbiAgICAgIH0pKTtcbiAgICAgIG1vZGUuY29udGFpbnMuZm9yRWFjaChmdW5jdGlvbihjKSB7Y29tcGlsZU1vZGUoYywgbW9kZSk7fSk7XG5cbiAgICAgIGlmIChtb2RlLnN0YXJ0cykge1xuICAgICAgICBjb21waWxlTW9kZShtb2RlLnN0YXJ0cywgcGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRlcm1pbmF0b3JzID1cbiAgICAgICAgbW9kZS5jb250YWlucy5tYXAoZnVuY3Rpb24oYykge1xuICAgICAgICAgIHJldHVybiBjLmJlZ2luS2V5d29yZHMgPyAnXFxcXC4/KCcgKyBjLmJlZ2luICsgJylcXFxcLj8nIDogYy5iZWdpbjtcbiAgICAgICAgfSlcbiAgICAgICAgLmNvbmNhdChbbW9kZS50ZXJtaW5hdG9yX2VuZCwgbW9kZS5pbGxlZ2FsXSlcbiAgICAgICAgLm1hcChyZVN0cilcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIG1vZGUudGVybWluYXRvcnMgPSB0ZXJtaW5hdG9ycy5sZW5ndGggPyBsYW5nUmUodGVybWluYXRvcnMuam9pbignfCcpLCB0cnVlKSA6IHtleGVjOiBmdW5jdGlvbigvKnMqLykge3JldHVybiBudWxsO319O1xuICAgIH1cblxuICAgIGNvbXBpbGVNb2RlKGxhbmd1YWdlKTtcbiAgfVxuXG4gIC8qXG4gIENvcmUgaGlnaGxpZ2h0aW5nIGZ1bmN0aW9uLiBBY2NlcHRzIGEgbGFuZ3VhZ2UgbmFtZSwgb3IgYW4gYWxpYXMsIGFuZCBhXG4gIHN0cmluZyB3aXRoIHRoZSBjb2RlIHRvIGhpZ2hsaWdodC4gUmV0dXJucyBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nXG4gIHByb3BlcnRpZXM6XG5cbiAgLSByZWxldmFuY2UgKGludClcbiAgLSB2YWx1ZSAoYW4gSFRNTCBzdHJpbmcgd2l0aCBoaWdobGlnaHRpbmcgbWFya3VwKVxuXG4gICovXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodChuYW1lLCB2YWx1ZSwgaWdub3JlX2lsbGVnYWxzLCBjb250aW51YXRpb24pIHtcblxuICAgIGZ1bmN0aW9uIHN1Yk1vZGUobGV4ZW1lLCBtb2RlKSB7XG4gICAgICB2YXIgaSwgbGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBtb2RlLmNvbnRhaW5zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0ZXN0UmUobW9kZS5jb250YWluc1tpXS5iZWdpblJlLCBsZXhlbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZGUuY29udGFpbnNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZk1vZGUobW9kZSwgbGV4ZW1lKSB7XG4gICAgICBpZiAodGVzdFJlKG1vZGUuZW5kUmUsIGxleGVtZSkpIHtcbiAgICAgICAgd2hpbGUgKG1vZGUuZW5kc1BhcmVudCAmJiBtb2RlLnBhcmVudCkge1xuICAgICAgICAgIG1vZGUgPSBtb2RlLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kZTtcbiAgICAgIH1cbiAgICAgIGlmIChtb2RlLmVuZHNXaXRoUGFyZW50KSB7XG4gICAgICAgIHJldHVybiBlbmRPZk1vZGUobW9kZS5wYXJlbnQsIGxleGVtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJbGxlZ2FsKGxleGVtZSwgbW9kZSkge1xuICAgICAgcmV0dXJuICFpZ25vcmVfaWxsZWdhbHMgJiYgdGVzdFJlKG1vZGUuaWxsZWdhbFJlLCBsZXhlbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleXdvcmRNYXRjaChtb2RlLCBtYXRjaCkge1xuICAgICAgdmFyIG1hdGNoX3N0ciA9IGxhbmd1YWdlLmNhc2VfaW5zZW5zaXRpdmUgPyBtYXRjaFswXS50b0xvd2VyQ2FzZSgpIDogbWF0Y2hbMF07XG4gICAgICByZXR1cm4gbW9kZS5rZXl3b3Jkcy5oYXNPd25Qcm9wZXJ0eShtYXRjaF9zdHIpICYmIG1vZGUua2V5d29yZHNbbWF0Y2hfc3RyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZFNwYW4oY2xhc3NuYW1lLCBpbnNpZGVTcGFuLCBsZWF2ZU9wZW4sIG5vUHJlZml4KSB7XG4gICAgICB2YXIgY2xhc3NQcmVmaXggPSBub1ByZWZpeCA/ICcnIDogb3B0aW9ucy5jbGFzc1ByZWZpeCxcbiAgICAgICAgICBvcGVuU3BhbiAgICA9ICc8c3BhbiBjbGFzcz1cIicgKyBjbGFzc1ByZWZpeCxcbiAgICAgICAgICBjbG9zZVNwYW4gICA9IGxlYXZlT3BlbiA/ICcnIDogc3BhbkVuZFRhZ1xuXG4gICAgICBvcGVuU3BhbiArPSBjbGFzc25hbWUgKyAnXCI+JztcblxuICAgICAgcmV0dXJuIG9wZW5TcGFuICsgaW5zaWRlU3BhbiArIGNsb3NlU3BhbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzS2V5d29yZHMoKSB7XG4gICAgICB2YXIga2V5d29yZF9tYXRjaCwgbGFzdF9pbmRleCwgbWF0Y2gsIHJlc3VsdDtcblxuICAgICAgaWYgKCF0b3Aua2V5d29yZHMpXG4gICAgICAgIHJldHVybiBlc2NhcGUobW9kZV9idWZmZXIpO1xuXG4gICAgICByZXN1bHQgPSAnJztcbiAgICAgIGxhc3RfaW5kZXggPSAwO1xuICAgICAgdG9wLmxleGVtZXNSZS5sYXN0SW5kZXggPSAwO1xuICAgICAgbWF0Y2ggPSB0b3AubGV4ZW1lc1JlLmV4ZWMobW9kZV9idWZmZXIpO1xuXG4gICAgICB3aGlsZSAobWF0Y2gpIHtcbiAgICAgICAgcmVzdWx0ICs9IGVzY2FwZShtb2RlX2J1ZmZlci5zdWJzdHJpbmcobGFzdF9pbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAga2V5d29yZF9tYXRjaCA9IGtleXdvcmRNYXRjaCh0b3AsIG1hdGNoKTtcbiAgICAgICAgaWYgKGtleXdvcmRfbWF0Y2gpIHtcbiAgICAgICAgICByZWxldmFuY2UgKz0ga2V5d29yZF9tYXRjaFsxXTtcbiAgICAgICAgICByZXN1bHQgKz0gYnVpbGRTcGFuKGtleXdvcmRfbWF0Y2hbMF0sIGVzY2FwZShtYXRjaFswXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCArPSBlc2NhcGUobWF0Y2hbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RfaW5kZXggPSB0b3AubGV4ZW1lc1JlLmxhc3RJbmRleDtcbiAgICAgICAgbWF0Y2ggPSB0b3AubGV4ZW1lc1JlLmV4ZWMobW9kZV9idWZmZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdCArIGVzY2FwZShtb2RlX2J1ZmZlci5zdWJzdHIobGFzdF9pbmRleCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTdWJMYW5ndWFnZSgpIHtcbiAgICAgIHZhciBleHBsaWNpdCA9IHR5cGVvZiB0b3Auc3ViTGFuZ3VhZ2UgPT09ICdzdHJpbmcnO1xuICAgICAgaWYgKGV4cGxpY2l0ICYmICFsYW5ndWFnZXNbdG9wLnN1Ykxhbmd1YWdlXSkge1xuICAgICAgICByZXR1cm4gZXNjYXBlKG1vZGVfYnVmZmVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IGV4cGxpY2l0ID9cbiAgICAgICAgICAgICAgICAgICBoaWdobGlnaHQodG9wLnN1Ykxhbmd1YWdlLCBtb2RlX2J1ZmZlciwgdHJ1ZSwgY29udGludWF0aW9uc1t0b3Auc3ViTGFuZ3VhZ2VdKSA6XG4gICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QXV0byhtb2RlX2J1ZmZlciwgdG9wLnN1Ykxhbmd1YWdlLmxlbmd0aCA/IHRvcC5zdWJMYW5ndWFnZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgIC8vIENvdW50aW5nIGVtYmVkZGVkIGxhbmd1YWdlIHNjb3JlIHRvd2FyZHMgdGhlIGhvc3QgbGFuZ3VhZ2UgbWF5IGJlIGRpc2FibGVkXG4gICAgICAvLyB3aXRoIHplcm9pbmcgdGhlIGNvbnRhaW5pbmcgbW9kZSByZWxldmFuY2UuIFVzZWNhc2UgaW4gcG9pbnQgaXMgTWFya2Rvd24gdGhhdFxuICAgICAgLy8gYWxsb3dzIFhNTCBldmVyeXdoZXJlIGFuZCBtYWtlcyBldmVyeSBYTUwgc25pcHBldCB0byBoYXZlIGEgbXVjaCBsYXJnZXIgTWFya2Rvd25cbiAgICAgIC8vIHNjb3JlLlxuICAgICAgaWYgKHRvcC5yZWxldmFuY2UgPiAwKSB7XG4gICAgICAgIHJlbGV2YW5jZSArPSByZXN1bHQucmVsZXZhbmNlO1xuICAgICAgfVxuICAgICAgaWYgKGV4cGxpY2l0KSB7XG4gICAgICAgIGNvbnRpbnVhdGlvbnNbdG9wLnN1Ykxhbmd1YWdlXSA9IHJlc3VsdC50b3A7XG4gICAgICB9XG4gICAgICByZXR1cm4gYnVpbGRTcGFuKHJlc3VsdC5sYW5ndWFnZSwgcmVzdWx0LnZhbHVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0J1ZmZlcigpIHtcbiAgICAgIHJlc3VsdCArPSAodG9wLnN1Ykxhbmd1YWdlICE9IG51bGwgPyBwcm9jZXNzU3ViTGFuZ3VhZ2UoKSA6IHByb2Nlc3NLZXl3b3JkcygpKTtcbiAgICAgIG1vZGVfYnVmZmVyID0gJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnROZXdNb2RlKG1vZGUpIHtcbiAgICAgIHJlc3VsdCArPSBtb2RlLmNsYXNzTmFtZT8gYnVpbGRTcGFuKG1vZGUuY2xhc3NOYW1lLCAnJywgdHJ1ZSk6ICcnO1xuICAgICAgdG9wID0gT2JqZWN0LmNyZWF0ZShtb2RlLCB7cGFyZW50OiB7dmFsdWU6IHRvcH19KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzTGV4ZW1lKGJ1ZmZlciwgbGV4ZW1lKSB7XG5cbiAgICAgIG1vZGVfYnVmZmVyICs9IGJ1ZmZlcjtcblxuICAgICAgaWYgKGxleGVtZSA9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3NCdWZmZXIoKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXdfbW9kZSA9IHN1Yk1vZGUobGV4ZW1lLCB0b3ApO1xuICAgICAgaWYgKG5ld19tb2RlKSB7XG4gICAgICAgIGlmIChuZXdfbW9kZS5za2lwKSB7XG4gICAgICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChuZXdfbW9kZS5leGNsdWRlQmVnaW4pIHtcbiAgICAgICAgICAgIG1vZGVfYnVmZmVyICs9IGxleGVtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzc0J1ZmZlcigpO1xuICAgICAgICAgIGlmICghbmV3X21vZGUucmV0dXJuQmVnaW4gJiYgIW5ld19tb2RlLmV4Y2x1ZGVCZWdpbikge1xuICAgICAgICAgICAgbW9kZV9idWZmZXIgPSBsZXhlbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0TmV3TW9kZShuZXdfbW9kZSwgbGV4ZW1lKTtcbiAgICAgICAgcmV0dXJuIG5ld19tb2RlLnJldHVybkJlZ2luID8gMCA6IGxleGVtZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmRfbW9kZSA9IGVuZE9mTW9kZSh0b3AsIGxleGVtZSk7XG4gICAgICBpZiAoZW5kX21vZGUpIHtcbiAgICAgICAgdmFyIG9yaWdpbiA9IHRvcDtcbiAgICAgICAgaWYgKG9yaWdpbi5za2lwKSB7XG4gICAgICAgICAgbW9kZV9idWZmZXIgKz0gbGV4ZW1lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghKG9yaWdpbi5yZXR1cm5FbmQgfHwgb3JpZ2luLmV4Y2x1ZGVFbmQpKSB7XG4gICAgICAgICAgICBtb2RlX2J1ZmZlciArPSBsZXhlbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3NCdWZmZXIoKTtcbiAgICAgICAgICBpZiAob3JpZ2luLmV4Y2x1ZGVFbmQpIHtcbiAgICAgICAgICAgIG1vZGVfYnVmZmVyID0gbGV4ZW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKHRvcC5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBzcGFuRW5kVGFnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIXRvcC5za2lwKSB7XG4gICAgICAgICAgICByZWxldmFuY2UgKz0gdG9wLnJlbGV2YW5jZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9wID0gdG9wLnBhcmVudDtcbiAgICAgICAgfSB3aGlsZSAodG9wICE9PSBlbmRfbW9kZS5wYXJlbnQpO1xuICAgICAgICBpZiAoZW5kX21vZGUuc3RhcnRzKSB7XG4gICAgICAgICAgc3RhcnROZXdNb2RlKGVuZF9tb2RlLnN0YXJ0cywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvcmlnaW4ucmV0dXJuRW5kID8gMCA6IGxleGVtZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0lsbGVnYWwobGV4ZW1lLCB0b3ApKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgbGV4ZW1lIFwiJyArIGxleGVtZSArICdcIiBmb3IgbW9kZSBcIicgKyAodG9wLmNsYXNzTmFtZSB8fCAnPHVubmFtZWQ+JykgKyAnXCInKTtcblxuICAgICAgLypcbiAgICAgIFBhcnNlciBzaG91bGQgbm90IHJlYWNoIHRoaXMgcG9pbnQgYXMgYWxsIHR5cGVzIG9mIGxleGVtZXMgc2hvdWxkIGJlIGNhdWdodFxuICAgICAgZWFybGllciwgYnV0IGlmIGl0IGRvZXMgZHVlIHRvIHNvbWUgYnVnIG1ha2Ugc3VyZSBpdCBhZHZhbmNlcyBhdCBsZWFzdCBvbmVcbiAgICAgIGNoYXJhY3RlciBmb3J3YXJkIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcGluZy5cbiAgICAgICovXG4gICAgICBtb2RlX2J1ZmZlciArPSBsZXhlbWU7XG4gICAgICByZXR1cm4gbGV4ZW1lLmxlbmd0aCB8fCAxO1xuICAgIH1cblxuICAgIHZhciBsYW5ndWFnZSA9IGdldExhbmd1YWdlKG5hbWUpO1xuICAgIGlmICghbGFuZ3VhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBsYW5ndWFnZTogXCInICsgbmFtZSArICdcIicpO1xuICAgIH1cblxuICAgIGNvbXBpbGVMYW5ndWFnZShsYW5ndWFnZSk7XG4gICAgdmFyIHRvcCA9IGNvbnRpbnVhdGlvbiB8fCBsYW5ndWFnZTtcbiAgICB2YXIgY29udGludWF0aW9ucyA9IHt9OyAvLyBrZWVwIGNvbnRpbnVhdGlvbnMgZm9yIHN1Yi1sYW5ndWFnZXNcbiAgICB2YXIgcmVzdWx0ID0gJycsIGN1cnJlbnQ7XG4gICAgZm9yKGN1cnJlbnQgPSB0b3A7IGN1cnJlbnQgIT09IGxhbmd1YWdlOyBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQpIHtcbiAgICAgIGlmIChjdXJyZW50LmNsYXNzTmFtZSkge1xuICAgICAgICByZXN1bHQgPSBidWlsZFNwYW4oY3VycmVudC5jbGFzc05hbWUsICcnLCB0cnVlKSArIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1vZGVfYnVmZmVyID0gJyc7XG4gICAgdmFyIHJlbGV2YW5jZSA9IDA7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtYXRjaCwgY291bnQsIGluZGV4ID0gMDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHRvcC50ZXJtaW5hdG9ycy5sYXN0SW5kZXggPSBpbmRleDtcbiAgICAgICAgbWF0Y2ggPSB0b3AudGVybWluYXRvcnMuZXhlYyh2YWx1ZSk7XG4gICAgICAgIGlmICghbWF0Y2gpXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNvdW50ID0gcHJvY2Vzc0xleGVtZSh2YWx1ZS5zdWJzdHJpbmcoaW5kZXgsIG1hdGNoLmluZGV4KSwgbWF0Y2hbMF0pO1xuICAgICAgICBpbmRleCA9IG1hdGNoLmluZGV4ICsgY291bnQ7XG4gICAgICB9XG4gICAgICBwcm9jZXNzTGV4ZW1lKHZhbHVlLnN1YnN0cihpbmRleCkpO1xuICAgICAgZm9yKGN1cnJlbnQgPSB0b3A7IGN1cnJlbnQucGFyZW50OyBjdXJyZW50ID0gY3VycmVudC5wYXJlbnQpIHsgLy8gY2xvc2UgZGFuZ2xpbmcgbW9kZXNcbiAgICAgICAgaWYgKGN1cnJlbnQuY2xhc3NOYW1lKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IHNwYW5FbmRUYWc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbGV2YW5jZTogcmVsZXZhbmNlLFxuICAgICAgICB2YWx1ZTogcmVzdWx0LFxuICAgICAgICBsYW5ndWFnZTogbmFtZSxcbiAgICAgICAgdG9wOiB0b3BcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLm1lc3NhZ2UuaW5kZXhPZignSWxsZWdhbCcpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlbGV2YW5jZTogMCxcbiAgICAgICAgICB2YWx1ZTogZXNjYXBlKHZhbHVlKVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKlxuICBIaWdobGlnaHRpbmcgd2l0aCBsYW5ndWFnZSBkZXRlY3Rpb24uIEFjY2VwdHMgYSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0b1xuICBoaWdobGlnaHQuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuXG4gIC0gbGFuZ3VhZ2UgKGRldGVjdGVkIGxhbmd1YWdlKVxuICAtIHJlbGV2YW5jZSAoaW50KVxuICAtIHZhbHVlIChhbiBIVE1MIHN0cmluZyB3aXRoIGhpZ2hsaWdodGluZyBtYXJrdXApXG4gIC0gc2Vjb25kX2Jlc3QgKG9iamVjdCB3aXRoIHRoZSBzYW1lIHN0cnVjdHVyZSBmb3Igc2Vjb25kLWJlc3QgaGV1cmlzdGljYWxseVxuICAgIGRldGVjdGVkIGxhbmd1YWdlLCBtYXkgYmUgYWJzZW50KVxuXG4gICovXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodEF1dG8odGV4dCwgbGFuZ3VhZ2VTdWJzZXQpIHtcbiAgICBsYW5ndWFnZVN1YnNldCA9IGxhbmd1YWdlU3Vic2V0IHx8IG9wdGlvbnMubGFuZ3VhZ2VzIHx8IG9iamVjdEtleXMobGFuZ3VhZ2VzKTtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgdmFsdWU6IGVzY2FwZSh0ZXh0KVxuICAgIH07XG4gICAgdmFyIHNlY29uZF9iZXN0ID0gcmVzdWx0O1xuICAgIGxhbmd1YWdlU3Vic2V0LmZpbHRlcihnZXRMYW5ndWFnZSkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGhpZ2hsaWdodChuYW1lLCB0ZXh0LCBmYWxzZSk7XG4gICAgICBjdXJyZW50Lmxhbmd1YWdlID0gbmFtZTtcbiAgICAgIGlmIChjdXJyZW50LnJlbGV2YW5jZSA+IHNlY29uZF9iZXN0LnJlbGV2YW5jZSkge1xuICAgICAgICBzZWNvbmRfYmVzdCA9IGN1cnJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudC5yZWxldmFuY2UgPiByZXN1bHQucmVsZXZhbmNlKSB7XG4gICAgICAgIHNlY29uZF9iZXN0ID0gcmVzdWx0O1xuICAgICAgICByZXN1bHQgPSBjdXJyZW50O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChzZWNvbmRfYmVzdC5sYW5ndWFnZSkge1xuICAgICAgcmVzdWx0LnNlY29uZF9iZXN0ID0gc2Vjb25kX2Jlc3Q7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKlxuICBQb3N0LXByb2Nlc3Npbmcgb2YgdGhlIGhpZ2hsaWdodGVkIG1hcmt1cDpcblxuICAtIHJlcGxhY2UgVEFCcyB3aXRoIHNvbWV0aGluZyBtb3JlIHVzZWZ1bFxuICAtIHJlcGxhY2UgcmVhbCBsaW5lLWJyZWFrcyB3aXRoICc8YnI+JyBmb3Igbm9uLXByZSBjb250YWluZXJzXG5cbiAgKi9cbiAgZnVuY3Rpb24gZml4TWFya3VwKHZhbHVlKSB7XG4gICAgcmV0dXJuICEob3B0aW9ucy50YWJSZXBsYWNlIHx8IG9wdGlvbnMudXNlQlIpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IHZhbHVlLnJlcGxhY2UoZml4TWFya3VwUmUsIGZ1bmN0aW9uKG1hdGNoLCBwMSkge1xuICAgICAgICAgIGlmIChvcHRpb25zLnVzZUJSICYmIG1hdGNoID09PSAnXFxuJykge1xuICAgICAgICAgICAgcmV0dXJuICc8YnI+JztcbiAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudGFiUmVwbGFjZSkge1xuICAgICAgICAgICAgcmV0dXJuIHAxLnJlcGxhY2UoL1xcdC9nLCBvcHRpb25zLnRhYlJlcGxhY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkQ2xhc3NOYW1lKHByZXZDbGFzc05hbWUsIGN1cnJlbnRMYW5nLCByZXN1bHRMYW5nKSB7XG4gICAgdmFyIGxhbmd1YWdlID0gY3VycmVudExhbmcgPyBhbGlhc2VzW2N1cnJlbnRMYW5nXSA6IHJlc3VsdExhbmcsXG4gICAgICAgIHJlc3VsdCAgID0gW3ByZXZDbGFzc05hbWUudHJpbSgpXTtcblxuICAgIGlmICghcHJldkNsYXNzTmFtZS5tYXRjaCgvXFxiaGxqc1xcYi8pKSB7XG4gICAgICByZXN1bHQucHVzaCgnaGxqcycpO1xuICAgIH1cblxuICAgIGlmIChwcmV2Q2xhc3NOYW1lLmluZGV4T2YobGFuZ3VhZ2UpID09PSAtMSkge1xuICAgICAgcmVzdWx0LnB1c2gobGFuZ3VhZ2UpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQuam9pbignICcpLnRyaW0oKTtcbiAgfVxuXG4gIC8qXG4gIEFwcGxpZXMgaGlnaGxpZ2h0aW5nIHRvIGEgRE9NIG5vZGUgY29udGFpbmluZyBjb2RlLiBBY2NlcHRzIGEgRE9NIG5vZGUgYW5kXG4gIHR3byBvcHRpb25hbCBwYXJhbWV0ZXJzIGZvciBmaXhNYXJrdXAuXG4gICovXG4gIGZ1bmN0aW9uIGhpZ2hsaWdodEJsb2NrKGJsb2NrKSB7XG4gICAgdmFyIG5vZGUsIG9yaWdpbmFsU3RyZWFtLCByZXN1bHQsIHJlc3VsdE5vZGUsIHRleHQ7XG4gICAgdmFyIGxhbmd1YWdlID0gYmxvY2tMYW5ndWFnZShibG9jayk7XG5cbiAgICBpZiAoaXNOb3RIaWdobGlnaHRlZChsYW5ndWFnZSkpXG4gICAgICAgIHJldHVybjtcblxuICAgIGlmIChvcHRpb25zLnVzZUJSKSB7XG4gICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2RpdicpO1xuICAgICAgbm9kZS5pbm5lckhUTUwgPSBibG9jay5pbm5lckhUTUwucmVwbGFjZSgvXFxuL2csICcnKS5yZXBsYWNlKC88YnJbIFxcL10qPi9nLCAnXFxuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBibG9jaztcbiAgICB9XG4gICAgdGV4dCA9IG5vZGUudGV4dENvbnRlbnQ7XG4gICAgcmVzdWx0ID0gbGFuZ3VhZ2UgPyBoaWdobGlnaHQobGFuZ3VhZ2UsIHRleHQsIHRydWUpIDogaGlnaGxpZ2h0QXV0byh0ZXh0KTtcblxuICAgIG9yaWdpbmFsU3RyZWFtID0gbm9kZVN0cmVhbShub2RlKTtcbiAgICBpZiAob3JpZ2luYWxTdHJlYW0ubGVuZ3RoKSB7XG4gICAgICByZXN1bHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2RpdicpO1xuICAgICAgcmVzdWx0Tm9kZS5pbm5lckhUTUwgPSByZXN1bHQudmFsdWU7XG4gICAgICByZXN1bHQudmFsdWUgPSBtZXJnZVN0cmVhbXMob3JpZ2luYWxTdHJlYW0sIG5vZGVTdHJlYW0ocmVzdWx0Tm9kZSksIHRleHQpO1xuICAgIH1cbiAgICByZXN1bHQudmFsdWUgPSBmaXhNYXJrdXAocmVzdWx0LnZhbHVlKTtcblxuICAgIGJsb2NrLmlubmVySFRNTCA9IHJlc3VsdC52YWx1ZTtcbiAgICBibG9jay5jbGFzc05hbWUgPSBidWlsZENsYXNzTmFtZShibG9jay5jbGFzc05hbWUsIGxhbmd1YWdlLCByZXN1bHQubGFuZ3VhZ2UpO1xuICAgIGJsb2NrLnJlc3VsdCA9IHtcbiAgICAgIGxhbmd1YWdlOiByZXN1bHQubGFuZ3VhZ2UsXG4gICAgICByZTogcmVzdWx0LnJlbGV2YW5jZVxuICAgIH07XG4gICAgaWYgKHJlc3VsdC5zZWNvbmRfYmVzdCkge1xuICAgICAgYmxvY2suc2Vjb25kX2Jlc3QgPSB7XG4gICAgICAgIGxhbmd1YWdlOiByZXN1bHQuc2Vjb25kX2Jlc3QubGFuZ3VhZ2UsXG4gICAgICAgIHJlOiByZXN1bHQuc2Vjb25kX2Jlc3QucmVsZXZhbmNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gIFVwZGF0ZXMgaGlnaGxpZ2h0LmpzIGdsb2JhbCBvcHRpb25zIHdpdGggdmFsdWVzIHBhc3NlZCBpbiB0aGUgZm9ybSBvZiBhbiBvYmplY3QuXG4gICovXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZSh1c2VyX29wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gaW5oZXJpdChvcHRpb25zLCB1c2VyX29wdGlvbnMpO1xuICB9XG5cbiAgLypcbiAgQXBwbGllcyBoaWdobGlnaHRpbmcgdG8gYWxsIDxwcmU+PGNvZGU+Li48L2NvZGU+PC9wcmU+IGJsb2NrcyBvbiBhIHBhZ2UuXG4gICovXG4gIGZ1bmN0aW9uIGluaXRIaWdobGlnaHRpbmcoKSB7XG4gICAgaWYgKGluaXRIaWdobGlnaHRpbmcuY2FsbGVkKVxuICAgICAgcmV0dXJuO1xuICAgIGluaXRIaWdobGlnaHRpbmcuY2FsbGVkID0gdHJ1ZTtcblxuICAgIHZhciBibG9ja3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwcmUgY29kZScpO1xuICAgIEFycmF5UHJvdG8uZm9yRWFjaC5jYWxsKGJsb2NrcywgaGlnaGxpZ2h0QmxvY2spO1xuICB9XG5cbiAgLypcbiAgQXR0YWNoZXMgaGlnaGxpZ2h0aW5nIHRvIHRoZSBwYWdlIGxvYWQgZXZlbnQuXG4gICovXG4gIGZ1bmN0aW9uIGluaXRIaWdobGlnaHRpbmdPbkxvYWQoKSB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGluaXRIaWdobGlnaHRpbmcsIGZhbHNlKTtcbiAgICBhZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaW5pdEhpZ2hsaWdodGluZywgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJMYW5ndWFnZShuYW1lLCBsYW5ndWFnZSkge1xuICAgIHZhciBsYW5nID0gbGFuZ3VhZ2VzW25hbWVdID0gbGFuZ3VhZ2UoaGxqcyk7XG4gICAgaWYgKGxhbmcuYWxpYXNlcykge1xuICAgICAgbGFuZy5hbGlhc2VzLmZvckVhY2goZnVuY3Rpb24oYWxpYXMpIHthbGlhc2VzW2FsaWFzXSA9IG5hbWU7fSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlzdExhbmd1YWdlcygpIHtcbiAgICByZXR1cm4gb2JqZWN0S2V5cyhsYW5ndWFnZXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGFuZ3VhZ2UobmFtZSkge1xuICAgIG5hbWUgPSAobmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbGFuZ3VhZ2VzW25hbWVdIHx8IGxhbmd1YWdlc1thbGlhc2VzW25hbWVdXTtcbiAgfVxuXG4gIC8qIEludGVyZmFjZSBkZWZpbml0aW9uICovXG5cbiAgaGxqcy5oaWdobGlnaHQgPSBoaWdobGlnaHQ7XG4gIGhsanMuaGlnaGxpZ2h0QXV0byA9IGhpZ2hsaWdodEF1dG87XG4gIGhsanMuZml4TWFya3VwID0gZml4TWFya3VwO1xuICBobGpzLmhpZ2hsaWdodEJsb2NrID0gaGlnaGxpZ2h0QmxvY2s7XG4gIGhsanMuY29uZmlndXJlID0gY29uZmlndXJlO1xuICBobGpzLmluaXRIaWdobGlnaHRpbmcgPSBpbml0SGlnaGxpZ2h0aW5nO1xuICBobGpzLmluaXRIaWdobGlnaHRpbmdPbkxvYWQgPSBpbml0SGlnaGxpZ2h0aW5nT25Mb2FkO1xuICBobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UgPSByZWdpc3Rlckxhbmd1YWdlO1xuICBobGpzLmxpc3RMYW5ndWFnZXMgPSBsaXN0TGFuZ3VhZ2VzO1xuICBobGpzLmdldExhbmd1YWdlID0gZ2V0TGFuZ3VhZ2U7XG4gIGhsanMuaW5oZXJpdCA9IGluaGVyaXQ7XG5cbiAgLy8gQ29tbW9uIHJlZ2V4cHNcbiAgaGxqcy5JREVOVF9SRSA9ICdbYS16QS1aXVxcXFx3Kic7XG4gIGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSA9ICdbYS16QS1aX11cXFxcdyonO1xuICBobGpzLk5VTUJFUl9SRSA9ICdcXFxcYlxcXFxkKyhcXFxcLlxcXFxkKyk/JztcbiAgaGxqcy5DX05VTUJFUl9SRSA9ICcoLT8pKFxcXFxiMFt4WF1bYS1mQS1GMC05XSt8KFxcXFxiXFxcXGQrKFxcXFwuXFxcXGQqKT98XFxcXC5cXFxcZCspKFtlRV1bLStdP1xcXFxkKyk/KSc7IC8vIDB4Li4uLCAwLi4uLCBkZWNpbWFsLCBmbG9hdFxuICBobGpzLkJJTkFSWV9OVU1CRVJfUkUgPSAnXFxcXGIoMGJbMDFdKyknOyAvLyAwYi4uLlxuICBobGpzLlJFX1NUQVJURVJTX1JFID0gJyF8IT18IT09fCV8JT18JnwmJnwmPXxcXFxcKnxcXFxcKj18XFxcXCt8XFxcXCs9fCx8LXwtPXwvPXwvfDp8O3w8PHw8PD18PD18PHw9PT18PT18PXw+Pj49fD4+PXw+PXw+Pj58Pj58PnxcXFxcP3xcXFxcW3xcXFxce3xcXFxcKHxcXFxcXnxcXFxcXj18XFxcXHx8XFxcXHw9fFxcXFx8XFxcXHx8fic7XG5cbiAgLy8gQ29tbW9uIG1vZGVzXG4gIGhsanMuQkFDS1NMQVNIX0VTQ0FQRSA9IHtcbiAgICBiZWdpbjogJ1xcXFxcXFxcW1xcXFxzXFxcXFNdJywgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQVBPU19TVFJJTkdfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdzdHJpbmcnLFxuICAgIGJlZ2luOiAnXFwnJywgZW5kOiAnXFwnJyxcbiAgICBpbGxlZ2FsOiAnXFxcXG4nLFxuICAgIGNvbnRhaW5zOiBbaGxqcy5CQUNLU0xBU0hfRVNDQVBFXVxuICB9O1xuICBobGpzLlFVT1RFX1NUUklOR19NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gICAgYmVnaW46ICdcIicsIGVuZDogJ1wiJyxcbiAgICBpbGxlZ2FsOiAnXFxcXG4nLFxuICAgIGNvbnRhaW5zOiBbaGxqcy5CQUNLU0xBU0hfRVNDQVBFXVxuICB9O1xuICBobGpzLlBIUkFTQUxfV09SRFNfTU9ERSA9IHtcbiAgICBiZWdpbjogL1xcYihhfGFufHRoZXxhcmV8SSdtfGlzbid0fGRvbid0fGRvZXNuJ3R8d29uJ3R8YnV0fGp1c3R8c2hvdWxkfHByZXR0eXxzaW1wbHl8ZW5vdWdofGdvbm5hfGdvaW5nfHd0Znxzb3xzdWNofHdpbGx8eW91fHlvdXJ8dGhleXxsaWtlfG1vcmUpXFxiL1xuICB9O1xuICBobGpzLkNPTU1FTlQgPSBmdW5jdGlvbiAoYmVnaW4sIGVuZCwgaW5oZXJpdHMpIHtcbiAgICB2YXIgbW9kZSA9IGhsanMuaW5oZXJpdChcbiAgICAgIHtcbiAgICAgICAgY2xhc3NOYW1lOiAnY29tbWVudCcsXG4gICAgICAgIGJlZ2luOiBiZWdpbiwgZW5kOiBlbmQsXG4gICAgICAgIGNvbnRhaW5zOiBbXVxuICAgICAgfSxcbiAgICAgIGluaGVyaXRzIHx8IHt9XG4gICAgKTtcbiAgICBtb2RlLmNvbnRhaW5zLnB1c2goaGxqcy5QSFJBU0FMX1dPUkRTX01PREUpO1xuICAgIG1vZGUuY29udGFpbnMucHVzaCh7XG4gICAgICBjbGFzc05hbWU6ICdkb2N0YWcnLFxuICAgICAgYmVnaW46ICcoPzpUT0RPfEZJWE1FfE5PVEV8QlVHfFhYWCk6JyxcbiAgICAgIHJlbGV2YW5jZTogMFxuICAgIH0pO1xuICAgIHJldHVybiBtb2RlO1xuICB9O1xuICBobGpzLkNfTElORV9DT01NRU5UX01PREUgPSBobGpzLkNPTU1FTlQoJy8vJywgJyQnKTtcbiAgaGxqcy5DX0JMT0NLX0NPTU1FTlRfTU9ERSA9IGhsanMuQ09NTUVOVCgnL1xcXFwqJywgJ1xcXFwqLycpO1xuICBobGpzLkhBU0hfQ09NTUVOVF9NT0RFID0gaGxqcy5DT01NRU5UKCcjJywgJyQnKTtcbiAgaGxqcy5OVU1CRVJfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdudW1iZXInLFxuICAgIGJlZ2luOiBobGpzLk5VTUJFUl9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgaGxqcy5DX05VTUJFUl9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgYmVnaW46IGhsanMuQ19OVU1CRVJfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuQklOQVJZX05VTUJFUl9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ251bWJlcicsXG4gICAgYmVnaW46IGhsanMuQklOQVJZX05VTUJFUl9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgaGxqcy5DU1NfTlVNQkVSX01PREUgPSB7XG4gICAgY2xhc3NOYW1lOiAnbnVtYmVyJyxcbiAgICBiZWdpbjogaGxqcy5OVU1CRVJfUkUgKyAnKCcgK1xuICAgICAgJyV8ZW18ZXh8Y2h8cmVtJyAgK1xuICAgICAgJ3x2d3x2aHx2bWlufHZtYXgnICtcbiAgICAgICd8Y218bW18aW58cHR8cGN8cHgnICtcbiAgICAgICd8ZGVnfGdyYWR8cmFkfHR1cm4nICtcbiAgICAgICd8c3xtcycgK1xuICAgICAgJ3xIenxrSHonICtcbiAgICAgICd8ZHBpfGRwY218ZHBweCcgK1xuICAgICAgJyk/JyxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcbiAgaGxqcy5SRUdFWFBfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICdyZWdleHAnLFxuICAgIGJlZ2luOiAvXFwvLywgZW5kOiAvXFwvW2dpbXV5XSovLFxuICAgIGlsbGVnYWw6IC9cXG4vLFxuICAgIGNvbnRhaW5zOiBbXG4gICAgICBobGpzLkJBQ0tTTEFTSF9FU0NBUEUsXG4gICAgICB7XG4gICAgICAgIGJlZ2luOiAvXFxbLywgZW5kOiAvXFxdLyxcbiAgICAgICAgcmVsZXZhbmNlOiAwLFxuICAgICAgICBjb250YWluczogW2hsanMuQkFDS1NMQVNIX0VTQ0FQRV1cbiAgICAgIH1cbiAgICBdXG4gIH07XG4gIGhsanMuVElUTEVfTU9ERSA9IHtcbiAgICBjbGFzc05hbWU6ICd0aXRsZScsXG4gICAgYmVnaW46IGhsanMuSURFTlRfUkUsXG4gICAgcmVsZXZhbmNlOiAwXG4gIH07XG4gIGhsanMuVU5ERVJTQ09SRV9USVRMRV9NT0RFID0ge1xuICAgIGNsYXNzTmFtZTogJ3RpdGxlJyxcbiAgICBiZWdpbjogaGxqcy5VTkRFUlNDT1JFX0lERU5UX1JFLFxuICAgIHJlbGV2YW5jZTogMFxuICB9O1xuICBobGpzLk1FVEhPRF9HVUFSRCA9IHtcbiAgICAvLyBleGNsdWRlcyBtZXRob2QgbmFtZXMgZnJvbSBrZXl3b3JkIHByb2Nlc3NpbmdcbiAgICBiZWdpbjogJ1xcXFwuXFxcXHMqJyArIGhsanMuVU5ERVJTQ09SRV9JREVOVF9SRSxcbiAgICByZWxldmFuY2U6IDBcbiAgfTtcblxuICByZXR1cm4gaGxqcztcbn0pKTtcbiIsImltcG9ydCBobGpzIGZyb20gJ2hpZ2hsaWdodC5qcy9saWIvaGlnaGxpZ2h0J1xuaW1wb3J0IGpzb24gZnJvbSAnaGlnaGxpZ2h0LmpzL2xpYi9sYW5ndWFnZXMvanNvbidcbiAgICAgICBobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UoJ2pzb24nLCBqc29uKVxuXG5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG5cbiAgLy8gbGV0IHJlc3VsdCA9IGhsanMuaGlnaGxpZ2h0QXV0byhKU09OLnN0cmluZ2lmeShkYXRhW2UuZGF0YV0sIG51bGwsICdcXHQnKSlcbiAgLy8gcG9zdE1lc3NhZ2UocmVzdWx0LnZhbHVlKVxuXG4gIHBvc3RNZXNzYWdlKCdjYW4gZG8gdGhpcycpXG4gIFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==